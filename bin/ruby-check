#!/usr/bin/env bash
# vi: ft=bash
#
# © 2019-2024 Konstantin Gredeskoul, Inc., All rights reserved.  MIT LICENSE
#  
# @description  This is a script from the Bashmatic Library 
#               It validates all discovered rubies and checks 
#               for jemalloc presence.
#
# @see          https://github.com/kigster/bashmatic/bin/ruby-check

set +e

declare __ran_as_script

# shellcheck disable=SC2235
([[ -n ${ZSH_EVAL_CONTEXT} && ${ZSH_EVAL_CONTEXT} =~ :file$ ]] ||
  [[ -n $BASH_VERSION && $0 != "$BASH_SOURCE" ]]) && __ran_as_script=0 || __ran_as_script=1

declare -g project_root
project_root="$(dirname "$(
  cd "$(dirname "${BASH_SOURCE[0]}")" || exit 1
  pwd -P
)")"
export project_root

declare -g current_ruby
export with_jemalloc=0

export rb_option_quiet=false
export rb_option_verbose=false

export rb_check_specified_ruby=
export rb_check_all_rubies=false
export rb_check_current_ruby=false

export rb_action_je_stats=false
export rb_action_yjit_stats=false
export rb_action_yjit_pid=

export rb_action_help=false

declare rb_have_rbenv
if [[ -n "$(command -V rbenv 2>/dev/null)" ]]; then
  export rb_have_rbenv=true
else
  export rb_have_rbenv=false
fi

export rb_versions_normalized=false

export color_red="\e[1;31m"
export color_green="\e[1;32m"
export color_yellow="\e[1;33m"
export color_blue="\e[1;34m"
export clr="\e[0m"

export bakred='\e[41m'   # Red
export bakgrn='\e[42m'   # Green
export bakcyn='\e[46m'   # Cyan
export bldylw='\e[1;33m' # Yellow
export bldwht='\e[1;37m' # White

export cross=" ${clr}${bakred}${bldwht} ✘ ${clr} "
export check=" ${clr}${bakgrn}${bldwht} ✔︎ ${clr} "

declare -g -a rbenv_versions
declare -g -a ruby_candidates
declare -g -a rubies_to_check
declare -g -a ruby_paths
declare -g -i rubies_with_jemalloc
declare -g -i rubies_with_yjit

export rubies_with_jemalloc=0
export rubies_with_yjit=0

if ${rb_have_rbenv}; then
  # Versions will contain
  mapfile -t rbenv_versions < <(rbenv versions --bare)
  export rbenv_versions
fi

export ruby_candidates=( 
  /bin/ruby 
  /sbin/ruby 
  /usr/bin/ruby 
  /usr/sbin/ruby 
  /usr/local/bin/ruby 
  /opt/hombrew/bin/ruby 
  $(which ruby 2>/dev/null || true)
)

function rb.normalize-versions() {
  ${rb_versions_normalized} && return 0

  local -a rubies=()
  local version

  # shellcheck disable=SC2002
  [[ -f .ruby-version ]] && local="$(cat ".ruby-version" | tr -d '\n')"

  rubies+=( ${rbenv_versions[@]} )
  rubies+=( ${ruby_candidates[@]} )

  local -a rubies_checked=()

  for candidate in "${rubies[@]}"; do
    # compare a string that starts with space, ends with space and has space-separated
    # paths listed in a sequence to find duplicates and skip them
    if [[ " ${rubies_checked[*]} " =~ " ${candidate} " ]]; then
      continue
    fi

    # register this unique ruby in the list of already seen
    rubies_checked+=("${candidate}")

    # check if it exists and is executabler
    if [[ -x ${candidate} ]]; then
      ruby_paths+=("${candidate}")
    elif [[ "${candidate}" =~ ^[\.0-9]+$ ]] && ${rb_have_rbenv}; then
      # this would be the result of "rbenv versions" — we convert it into a real ruby path
      version=${candidate}
      # make local folder this vxersion
      if ${rb_have_rbenv} >/dev/null; then
        rbenv local "${version}"
        local ruby_path="$(rbenv prefix)/bin/ruby"
        [[ -x ${ruby_path} ]] && ruby_paths+=("${ruby_path}")
      fi
    fi
  done

  export rb_versions_normalized=true 
}

function line() {
  ${rb_option_verbose} && rb.printf "${color_green}──────────────────────────────────────────────────────────────────────────────────────────────────${clr}\n"  >&2
}

function rb.verbose() {
  if ${rb_option_verbose}; then
    printf "$@" >&2
  fi
}

function rb.header() {
  line
  rb.verbose "${color_green}$*${clr}\n"
  line
}

function rb.printf() {
  if "${rb_option_quiet}"; then
    echo >/dev/null
  else
    printf "$@" >&2
  fi
}

function rb.output() {
  printf "$@" >&2
}

function rb.error() {
  for arg in "$@"; do
    rb.printf "${color_red}ERROR: $arg${clr}\n"
  done
}

function rb.info() {
  rb.printf "${color_blue}$*${clr}\n"
}

# @description prints the info about current version of ruby
function rb.ruby.report() {
  local rb="$1"
  rb.printf "${color_yellow}%-50.50s${color_blue} (v%-20.20s) ${clr}" "${rb}" "$(rb.ruby.describe "${rb}")"
}

# @description Prints ruby version under test
function rb.ruby.describe() {
  local rb="$1"
  ${rb} -e 'puts "#{RUBY_VERSION} (#{RUBY_PLATFORM})"'
}

# @description detects jemalloc or exits
function rb.jemalloc.detect-or-exit() {
  local rb="$1"
  rb.jemalloc.detect-quiet "${rb}" || {
    rb.printf "${color_red}ERROR: No jemalloc detected in ruby ${rb}${clr}\n"
    exit 1
  }
}

# @description prints jemalloc statistics if jemalloc is available
function rb.jemalloc.stats() {
  local rb="$1"
  MALLOC_CONF=stats_print:true ${rb} -e "exit" 2>&1
}

# @description returns 0 if jemalloc was detected or 1 otherwise
function rb.jemalloc.detect-quiet() {
  local rb="$1"
  MALLOC_CONF=stats_print:true ${rb} -e "exit" 2>&1 | grep -q "jemalloc statistics"
}

# @description detects if jemalloc is linked and if so prints the info to output
function rb.jemalloc.detect-loud() {
  local rb="$1"
  shift
  rb.printf "${color_yellow}$(rb.ruby.report "${rb}")${clr}"
  rb.jemalloc.detect-quiet "${rb}"
  local code=$?
  if [[ ${code} -eq 0 ]]; then
    rb.printf " ${check} ${color_green} jemalloc detected"
  else
    rb.printf " ${cross} ${color_red} jemalloc not detected"
  fi
  rb.printf "${clr}"
  echo
  return "${code}"
}

function rb.jemalloc.stats-if-enabled() {
  local rb="$1"; shift

  if ${rb_action_je_stats}; then
    rb.jemalloc.stats "${rb}"
  fi
}

function rb.yjit.stats-if-enabled() {
  local rb="$1"; shift
  
  if ${rb_action_yjit_stats}; then
    rb.yjit.stats "${rb}" "${rb_action_yjit_pid}"
  fi
}

# @description Prints the help screen and exits
function usage() {
  rb.printf "
${color_green}USAGE:${clr}
  ${color_yellow}ruby-check -c [ -r <ruby-path> ] ${clr}

${color_green}DESCRIPTION:${clr}
  This script checks for two things for MRI (aka CRuby) Ruby.

    1. jemalloc linked with the interpreter
    2. yjit is available in the interpreter

  Which Ruby interpreter was compiled with jemalloc and yjit support.

  This script either checks every discovered Ruby binary on the
  system (with --all), or the specific Ruby provided in the arguments
  to -r/--ruby option.

  with jemalloc, the optimized for defragmentation memory allocator,
  which is a drop-in replacement for libc malloc.

  The script has several actions:
    - detect if the current ruby has Jemalloc linked (-d/--detect)
    - detect if any of the Rubies are linked with Jemalloc (-c/--check)
    - print jemalloc statistics if available (-s/--stats)
    - print this help screen (-h/--help)

  You can print statistics in either -d or -c modes. If more than one
  Ruby is linked with jemalloc, it will print stats multiple times:
  one for each Ruby

${color_green}SELECING RUBIES:${clr}
  -c/--current          Detect if the current (in the \$PATH) ruby binary is
                        linked with jemalloc. Compatible with -s.

  -a/--all              Find all rubies in the \$PATH and perform the check(s)

  -r/--ruby PATH        Path to the ruby binary to check (defaults to the
                        first ruby found in the \$PATH)

                        NOTE: the above flags require a select from the following
                        section, which specifies which checks to perform.


${color_green}RUBY CHECKS:${clr}
  -j/--jm-stats         Strart a ruby process and print its the jemalloc stats 
                        (when linked with jemalloc)

  -y/--yjit-stats PID   Print the YJIT stats for another running Ruby PID.

${color_green}OPTIONS:${clr}
  -q/--quiet            Print less output, exit with 1 if no jemalloc, or 0
                        if jemalloc was found.

  -v/--verbose          Print all discovered Ruby Interpreters before checking.

  -h/--help             This page (also printed when no arguments are provided)
"
  exit 0
}

function rb.first-pid() {
  ps -e -o pid,args | grep -E 'ruby|puma|irb|rails|sidekiq|unicorn|rake' | grep -v grep | awk '{print $1}' | head -1
}

function rb.parse-opts() {
  if [[ $# -eq 0 ]]; then
    usage
  fi

  # Parse additional flags
  while [[ $# -gt 0 ]]; do
    case $1 in
    # Ruby Selection
    -a | --all)
      shift
      export rb_check_all_rubies=true
      ;;

    -c | --current)
      shift
      export rb_check_current_ruby=true
      ;;

    -r | --ruby)
      shift
      if [[ -x $1 && $(basename "$1") == "ruby" ]]; then
        export rb_check_specified_ruby="$1"
      else
        rb.error "Invalid ruby interpreter provided: $1"
        exit 1
      fi
      shift
      ;;

    # Additional Actions
    -j | --jm-stats)
      shift
      export rb_action_je_stats=true
      ;;

    -p | --pid)
      shift
      export rb_action_yjit_pid=$1
      shift
      ;;

    -y | --yjit-stats)
      shift
      export rb_action_yjit_stats=true

      if [[ ${1} =~ ^-?[0-9]+$ ]]; then 
        if [[ -z ${rb_action_yjit_pid} ]]; then
          export rb_action_yjit_pid=$1
          shift
        fi
      else
        rb.error "--yjit-stats requires a PID argument"
        exit 1
      fi
      ;;

    # Output Options
    -h | -\? | --help)
      shift
      export rb_action_help=true
      ;;

    -q | --quiet)
      shift
      export rb_option_quiet=true
      ;;

    -v | --verbose)
      shift
      export rb_option_verbose=true
      ;;

    --) # End of all options; anything after will be passed to the action function
      shift
      break
      ;;
    *)
      [[ -n $arg ]] && {
        rb.error "${color_red}ERROR: invalid option: $arg${clr}\n"
        exit 1
      }
      break
      ;;
    esac
  done
}

function rb.process.path() {
  local search="$*"
  local pid="$(ps auxww | grep "${search}" | grep -v grep | head -2 | awk '{print $2}')"
  if [[ -n "${pid}" ]] ; then
    lsof -p ${pid} | grep REG | grep ruby | head -1 | awk '{print $9}'
  else
    rb.error "No process found matching: ${search}"
    return 1
  fi
}

function rb.stats.print() {
  local rb="$1"
  ${rb_action_je_stats}   && rb.jemalloc.stats-if-enabled "${rb}"
  ${rb_action_yjit_stats} && rb.yjit.stats-if-enabled "${rb}"
}

function rb.main() {
  rb.parse-opts "$@"

  if ${rb_action_help}; then
    usage
  fi

  local -a rubies_to_check=()
  local code
  local current_ruby
  local first_ruby_with_jemalloc

  export code=0

  rb.normalize-versions

  if [[ ${rb_check_current_ruby} == "true" ]]; then
    if [[ $(which ruby) =~ shims ]]; then
      current_ruby="$(rbenv which ruby)"
    else
      current_ruby="$(which ruby)"
    fi
    rubies_to_check+=(${current_ruby})
    rb.header "Checking Ruby ${current_ruby}..."

  elif [[ ${rb_check_all_rubies} == "true" ]]; then
    rb.header "Listing all detected interpreters on this system..."
    for ruby in "${ruby_paths[@]}"; do
      if [[ -x ${ruby} ]]; then
        # shellcheck disable=SC2001
        local ruby_path="$(echo "${ruby}" | sed "s|${HOME}|~|")"
        version=$(${ruby} -e 'puts RUBY_VERSION')

        rb.verbose "ruby ${bldylw}v%-13.13s → " "${version}"
        rb.verbose "  %-40.40s${clr}" "${ruby_path}"
        rb.verbose "${txtgrn} ${check}\n"
        rubies_to_check+=("${ruby}")
      else
        rb.verbose "discovering ruby @ ${bldylw}%-10.10s → " "${ruby}"
        rb.verbose "${txtred}  %-40.40s${clr}" "not found"
        rb.verbose "${cross}\n"
      fi
    done
  elif [[ ${rb_check_specified_ruby} ]]; then
   rb.header "Checking specified ruby ${rb_check_current_ruby}..."
   rubies_to_check+=("${rb_check_specified_ruby}")
  else # default to the first ruby found
    rb.error "You did not specify which rubies to check."
    rb.error "Run with --help for more information."
    exit 2
  fi

  [[ ${#rubies_to_check[@]} -eq 0 ]] && {
    rb.error "No rubies found to check."
    exit 1
  }

  rb.header "Checking requested Rubies for jemalloc & YJIT support"

  for ruby in "${rubies_to_check[@]}"; do
    current_ruby="$(realpath "${ruby}")"
    if ${rb_option_quiet}; then
      rb.jemalloc.detect-quiet "${current_ruby}"
      code=$?
    else
      rb.jemalloc.detect-loud "${current_ruby}"
      code=$?
    fi
    if [[ ${code} -eq 0 ]]; then
      [[ -z ${first_ruby_with_jemalloc} ]] && first_ruby_with_jemalloc="${ruby}"
      ((rubies_with_jemalloc++))
    fi
  done

  if [[ -n ${first_ruby_with_jemalloc} ]] && ${rb_action_je_stats}; then
    rb.stats.print "${first_ruby_with_jemalloc}"
  fi

  if [[ ${rubies_with_jemalloc} -eq 0 ]]; then
    rb.error "No rubies with jemalloc were found :-("
    return 1
  else
    echo
    rb.output "${txtgrn}${rubies_with_jemalloc} rubies have jemalloc enabled out of ${#rubies_to_check[@]} checked.${clr}\n"
    return 0
  fi
}

((__ran_as_script)) || return 0

rb.main "$@"

if [[ ${rubies_with_jemalloc} -gt 0 ]]; then
  exit 0
else
  exit 1
fi
