#!/usr/bin/env bash
# vim: ft=sh
# Bashmatic Utilities
# Â© 2016-2020 Konstantin Gredeskoul, All rights reserved. MIT License.
# Distributed under the MIT LICENSE.

export TERM=${TERM:-xterm-256color}
export MIN_WIDTH=${MIN_WIDTH:-"100"}

export ProjectRoot=$(pwd -P)
trap "rm -f ${ProjectRoot}/Gemfile.lock" EXIT
export BatsRoot="${ProjectRoot}/.bats-sources"
export BatsPrefix="${ProjectRoot}/.bats-install"

echo "BatsPrefix is ${BatsPrefix}"

declare -a TestFiles=()

export True=1
export False=0
export GrepCommand="$(which grep) -E -e "

export Bashmatic__Test=${True}

(mkdir -p ${BatsPrefix} 2>/dev/null) || true
(mkdir -p ${BatsPrefix}/bin 2>/dev/null) || true
(mkdir -p ${BatsPrefix}/libexec 2>/dev/null) || true

export PATH="$PATH:${BatsPrefix}/bin:${BatsPrefix}/libexec"

source "$(pwd)/init.sh"

if [[ -n ${CI} ]]; then
  .output.set-indent 0
  color.disable
else
  .output.set-indent 1
  color.enable
fi

specs.test-filename() {
  file=$1
  for f in ${file} "test/${file}" "test/${file}_tests.bats"; do
    if [[ -s ${f} ]]; then
      printf "%s" ${f}
      break
    fi
  done
}

specs.usage() {
  echo
  printf "USAGE\n    ${bldgrn}bin/specs [ test1 test2 ... ]${clr}\n\n"
  printf "    ${txtblu}where test1 can be a full filename, or a partial, eg.\n"
  printf "    ${txtblu}'test/util_tests.bats' or just 'util'.\n\n"

  printf "DESCRIPTION\n    ${txtblu}Run BASH tests using Bats framework\n"
  printf "    ${txtblu}Use to run the Bats Test Suite.\n\n"

  printf "OPTIONS\n"
  printf "    -h | --help     Show help message\n\n"

  exit 0
}

specs.install-bats-brew() {
  run "brew tap kaos/shell"
  brew.install.packages bats-assert bats-file bats-assert
}

specs.install-bats-sources() {
  [[ -n $(which bats) ]] && return 0
  [[ ${PATH} =~ ${ProjectRoot} ]] || export PATH="${ProjectRoot}/bin:${PATH}"
  [[ ! -d ${BatsRoot} ]] && run "git clone https://github.com/sstephenson/bats.git ${BatsRoot}"

  if [[ -d ${BatsRoot} && ! -x ${BatsPrefix}/bin/bats ]]; then
    run "cd ${BatsRoot} && git reset --hard && git pull --rebase 2>/dev/null"
    run.set-next show-output-on abort-on-error
    run "./install.sh ${BatsPrefix}"
    run "cd ${ProjectRoot}"
    run 'hash -r'
  fi
}

specs.install-bats() {
  specs.install-bats-sources "$@"
}

spec.find-bats() {
  command -v bats || which bats || find . -name bats -perm "-u=x" | ${GrepCommand} -v 'fixtures|libexec'
}

specs.run-file() {
  local file="$1"
  if [[ -z "${file}" ]]; then
    error "No argument provided"
    return 1
  fi
  if [[ ! -s "${file}" ]]; then
    error "File ${file} is not found."
    return 1
  fi
  test-group "${file}"
  set -e

  local bats=$(spec.find-bats)

  [[ -z ${bats} ]] && {
    echo "ERROR: can't find bats executable :("
    echo
    echo "which bats:                      $(which bats)"
    echo "command -v bats:                 $(command -v bats)"
    echo "find ${BatsRoot} -name bats:     $(find ${BatsRoot} -name bats)"
    exit 1
  }

  ${bats} -p "${file}"
  set +e
}

specs.select-files() {
  export os=$(uname -s | tr [A-Z] [a-z])
  if [[ -z ${TestFiles[*]} ]]; then
    TestFiles=($(ls -1 test/*_test.*))
    [[ -d "test/${os}" ]] && TestFiles=(${TestFiles[@]} $(ls -1 test/${os}/*_test.* 2>/dev/null))
  fi
  export TestFiles
}

specs.run-all() {
  for file in ${TestFiles[@]}; do
    set +e
    specs.run-file "${file}"
  done
}

specs.main() {
  specs.install-bats
  specs.select-files
  specs.run-all
}

trap 'printf "\n\n\n${bldred}BOOOOM! Ctrl-C will set you free...${clr}\n\n"; exit 1' SIGINT

# Parse additional flags
while :; do
  case $1 in
  -h | -\? | --help)
    shift
    specs.usage
    exit 0
    ;;
  --) # End of all options; anything after will be passed to the action function
    shift
    break
    ;;
  -?*)
    printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
    exit 127
    shift
    ;;
  *) # Default case: If no more options then break out of the loop.
    [[ -z ${1} ]] && break
    file=$(specs.test-filename $1)
    [[ -n "${file}" ]] && TestFiles=(${TestFiles[@]} ${file})
    shift
    ;;
  esac
done

specs.main "$@"
